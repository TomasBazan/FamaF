--Proyecto 1 
{- 12. (*) Para cada uno de los siguientes patrones, decidi si 
estan bien tipados, y en tal caso da los tipos de cada 
subexpresion. En caso de estar bien tipado, ¿el patron cubre
 todos los casos de definicion?
a) f :: (a, b) -> ...
f x = ...
Está bien tipado y cubre todos los casos de tuplas
b) f :: (a, b) -> ...
f (x , y) = ...
Sí está bien tipado pero no cubre el 
c) f :: [(a, b)] -> ...
f (a , b) = ...
d) f :: [(a, b)] -> ...
f (x:xs) = ...
e) f :: [(a, b)] -> ...
f ((x, y) : ((a, b) : xs)) = ...
f ) f :: [(Int, a)] -> ...
f [(0, a)] = ...
g) f :: [(Int, a)] -> ...
f ((x, 1) : xs) = ...
h) f :: [(Int, a)] -> ...
f ((1, x) : xs) = ...
i) f :: (Int -> Int) -> Int -> ...
f a b = ...
j) f :: (Int -> Int) -> Int -> ...
f a 3 = ...
k) f :: (Int -> Int) -> Int -> ...
f 0 1 2 = ...
l) f :: a -> (a -> a) -> ...
f a g = ...
13. (*) Para las siguientes declaraciones de funciones, da 
al menos una defincion cuando sea posible (que no sea la 
expresion undefined). ¿Podes dar alguna otra definicion 
alternativa a la que diste en cada caso?
Por ejemplo, si la declaracion es f :: (a, b) -> a,
la respuesta es: f (x,y) = x
a) f :: (a, b) -> b
b) f :: (a, b) -> c
c) f :: a -> b
d) f :: (a -> b) -> a -> b
e) f :: (a -> b) -> [a] -> [b]
f ) f :: (a -> b) -> a -> c
g) f :: (a -> b) -> (b -> c) -> a -> c -}

f :: (a, b) -> (a,b)
f (x , y) = f(x,y)